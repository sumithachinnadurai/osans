//FCFS/FIFO CPU SCHEDULING ALGORITHM
#include<iostream>
using namespace std;
int main(){
    cout<<"Enter Jobs:"<<endl;
    string a[5];
    for(int i=0;i<5;i++)
        cin>>a[i];
        
    cout<<"Enter the burst time:"<<endl;
    
    int b[5];
    for(int i=0;i<5;i++)
        cin>>b[i];
    
    int wt[5];
    int tat[5];
    wt[0]=0;
    tat[0]=b[0];
    float avgwt=0.00;
    float avgtat=0.00;
    for(int i=1;i<5;i++){
       tat[i]=b[i]+tat[i-1];
       wt[i]=wt[i-1]+b[i-1];
    }
    cout<<"Process   "<<"Burst time   "<<"Waiting Time    "<<"Turn around Time"<<endl;
    for(int i=0;i<5;i++){
        avgtat+=tat[i];
        avgwt+=wt[i];
       cout<<a[i]<<"            "<<b[i]<<"          "<<wt[i]<<"          "<<tat[i]<<endl;
    }
    
    cout<<"Average Waiting Time = "<<(avgwt/5)<<endl;
    cout<<"Average Turn Ariund time = "<<(avgtat/5);
    
}

//SJF CPU SCHEDULING ALGORITHM
#include<iostream>
#include<algorithm>
using namespace std;
int main(){
    cout<<"Enter Jobs:"<<endl;
    string p[5],psjf[5];
    for(int i=0;i<5;i++)
        cin>>p[i];
        
    cout<<"Enter the burst time:"<<endl;
    
    int bt[5],btsjf[5];
    for(int i=0;i<5;i++){
        cin>>bt[i];
        btsjf[i]=bt[i];
    }
    sort(btsjf,btsjf+5);
    for(int i=0;i<5;i++){
        for(int j=0;j<5;j++){
            if(btsjf[i]==bt[j]&&bt[j]!=-1){
                psjf[i]=p[j];
                bt[j]=-1;
            }
        }
    }
        
  
    
    
    int wt[5];
    int tat[5];
    wt[0]=0;
    tat[0]=btsjf[0];
    float avgwt=0.00;
    float avgtat=0.00;
    for(int i=1;i<5;i++){
      tat[i]=btsjf[i]+tat[i-1];
      wt[i]=wt[i-1]+btsjf[i-1];
    }
    cout<<"Process   "<<"Burst time   "<<"Waiting Time    "<<"Turn around Time"<<endl;
    for(int i=0;i<5;i++){
        avgtat+=tat[i];
        avgwt+=wt[i];
       cout<<psjf[i]<<"            "<<btsjf[i]<<"          "<<wt[i]<<"          "<<tat[i]<<endl;
    }
    
    cout<<"Average Waiting Time = "<<(avgwt/5)<<endl;
    cout<<"Average Turn Ariund time = "<<(avgtat/5);
    
}

//PAGE FAULT
#include<algorithm>
#include<iostream>
using namespace std;
int main(){
    int n;
    cin>>n;
    int p[n];
    for(int i=0;i<n;i++){
        cin>>p[i];
    }
    int a=-1,b=-1,c=-1,pf=0;
    for(int i=0;i<n;i++){
        if(p[i]==a){
           continue;
        }
        else if(p[i]==b){
        continue;
        }
        else if(p[i]==c){
            continue;
        }
        else{
            pf++;
            if(pf%3==1){
                a=p[i];
            }
            else if(pf%3==2){
                b=p[i];
            }
            else{
                c=p[i];
            }
        }
        cout<<a<<"  "<<b<<"  "<<c<<endl;
    }
    cout<<"No of Page fault: "<<pf;
}

//SYSTEM CALL
#include <stdio.h> 
#include <sys/stat.h> 
#include <stdlib.h> 
int main() 
{ 
struct stat s; 
int a; int b; 
if(stat("suba",&s)==(-1)) 
{ 
perror("Error: cannot stat file"); 
exit(0); 
} 
a=s.st_blksize; 
b=s.st_size; 
printf("ALLOCATED SIZE OF THE FILE :%d\nActual size of the file :%d\n",a,b); 
return 0; 
}

PROCESS SYSTEM CALLS
#include<stdio.h> 
#include<unistd.h> 
#include<stdlib.h> 
void main() 
{ 
int pid; 
pid=fork(); 
if (pid < 0) 
{ 
printf("The fork cannot be created"); 
exit(0); 
} 
else 
if (pid==0) 
{ 
execlp("/home/ls","ls",NULL); 
printf("\n The process id of the child: %d", getpid()); 
printf("\n The process id of the parent: %d", getppid()); 
} 
else{ 
printf("\n The process id of the parent: %d", getpid()); 
 
printf("\n The process id of the grandparent: %d", getppid()); 
}
}

//producer consumer
#include <iostream>
#include <conio.h>

using namespace std;

int count = 0;
int front = 0;
int rear = 0;
char buffer[25];
int p_p = 0;
int c_p = 0;

void producer(int);
void consumer(int);
void view(int);

void producer(int n) {
    char item;

    if (count < n) {
        cout << "Enter data: ";
        cin >> item;
        buffer[front] = item;
        front = (front + 1) % 5;
        count++;

        if (c_p == 1 && count == 1) {
            cout << "\nConsumer is now ready" << endl;
            c_p = 0;
        } else if (count == n) {
            cout << "\nBuffer is full..." << endl;
            p_p = 1;
        }
    }
}

void consumer(int n) {
    char item;

    if (count > 0) {
        item = buffer[rear];
        buffer[rear] = '\0';
        cout << "\nC: " << item << endl;
        rear = (rear + 1) % 5;
        count--;

        if (p_p == 1 && count == n - 1) {
            cout << "\nProducer is now ready" << endl;
            p_p = 0;
        }
    } else {
        cout << "\nBuffer is empty..." << endl;
        c_p = 1;
    }
}

void view(int n) {
    cout << "\nData of buffer: ";
    for (int i = 0; i < n; i++) {
        if (buffer[i] != '\0') {
            cout << buffer[i];
        }
    }
    cout << endl;
}

int main() {
    int n, ch, f = 0;

    cout << "\nENTER THE COUNT FOR THE BUFFER: ";
    cin >> n;

    cout << "\nOptions:";
    cout << "\n1: Producer item ";
    cout << "\n2: Consumer item ";
    cout << "\n3: To view buffer ";
    cout << "\n4: Exit" << endl;

    do {
        cout << "\nEnter your choice: ";
        cin >> ch;

        switch (ch) {
            case 1:
                producer(n);
                break;
            case 2:
                consumer(n);
                break;
            case 3:
                view(n);
                break;
            case 4:
                f = 1;
                break;
            default:
                cout << "\nEnter correct choice" << endl;
                break;
        }
    } while (f == 0);

    return 0;
}


//file directory
#include <iostream>
#include <dirent.h>
#include <cstdlib>
#include <cstring>

using namespace std;

void sea(const char *dname) {
    DIR *dir;
    struct dirent *ent;
    int flag = 0;
    char a[15];

    if ((dir = opendir(dname)) == NULL) {
        cout << "\nUnable to open directory" << endl;
        exit(1);
    }

    cout << "\nEnter the name of the file to be searched: ";
    cin >> a;

    while ((ent = readdir(dir)) != NULL) {
        if (strcmp(a, ent->d_name) == 0) {
            cout << ent->d_name << endl;
            flag++;
        }
    }

    if (flag == 1)
        cout << "\nThe given file is found\n\n";
    else
        cout << "\nFile not found" << endl;

    if (closedir(dir) != 0)
        cout << "Unable to close directory" << endl;
}

int main() {
    char dirname[25];

    cout << "\nEnter the directory to be searched: ";
    cin >> dirname;

    sea(dirname);

    return 0;
}


//file in directory or not
#include<stdio.h> 
#include<dirent.h> 
#include<stdlib.h> 
#include<string.h> 
void sea(char *dname) 
{ 
DIR *dir; 
struct dirent *ent; 
int flag = 0; 
char a[15]; 
if ((dir= opendir(dname))==NULL) 
{ 
printf("\n unable to open directory "); 
exit(1); 
} 
printf("\n Enter the name of the file to be searched :"); 
scanf("%s",a); 
45 
 
 
while((ent=readdir(dir))!=NULL) 
{ 
if(!strcmp(a,ent->d_name)) 
{ 
printf("%s",ent->d_name); 
flag++; 
 
} 
} 
if(flag==1) 
printf("\n the given file is found\n\n"); 
else 
printf("\nfile not found"); 
if(closedir(dir)!=0) 
printf("unable to close directory"); 
} 
int main() 
{ 
char dirname[25]; 
printf("\n Enter the directory to be searched :\n"); 
scanf("%s",dirname); 
sea(dirname); 
}
